{"name":"Rasberry Pi Ultraschall-Entfernungsmesser","tagline":"Ultraschall Entfernungsmesser auf Basis eines Raspberry Pi","body":"# Entfernung messen mit RaspberryPi\r\n\r\n\r\n## Einleitung:\r\n\r\nDiese Anleitung beschreibt, wie man mit wenigen Bauteilen und einem RaspberryPi einen Ultraschall-basierenden Entfernungsmesser baut.\r\n\r\n### Raspberry Pi Basis:\r\n\r\n* 1x RaspberryPi 2 ([Amazon](http://amzn.to/1HWR3hM))\r\n* 1x MicroUSB-Netzteil (~2A) ([Amazon](http://amzn.to/1Cxknv6))\r\n* 1x 8 oder 16GB MicroSD Karte ([Amazon](http://amzn.to/1KZHwZT))\r\n* 1x USB-Tastatur oder USB Tastatur/Maus Kombi ([Amazon](http://amzn.to/1KZHLUF))\r\n\r\nAlternativ kann auch ein Vorgänger-Modell des RaspberryPi 2 verwendet werden. Hierfür wird anstatt einer MicroSD eine SD Card benötigt. Im Prinzip kann jede USB Tastatur verwendet werden.\r\n\r\nDieses Set dient als Basis für praktisch alle Raspberry Pi Projekte. Der RaspberryPi 2 bietet gegenüber seinen Vorgänger-Modellen u.a. eine höhere CPU Geschwindigkeit, mehr Arbeitsspeicher und 4 anstatt 2 USB Anschlüsse. Je nach Projekt kann dies durchaus von Vorteil sein. \r\n\r\n### Bauteil-Liste für den Entfernungsmesser:\r\n\r\n* 1x Steckplatine / Breadboard small+ oder full+ ([Amazon](http://amzn.to/1HVmfOs))\r\n* 1x Steckbrücken-Set für die Steckplatine ([Amazon](http://amzn.to/1HokKqB))\r\n* 1x Set mit Male-Female Steckbrücken (Jumper Wires)¹ ([Amazon](http://amzn.to/1HWMDHV))\r\n* 1x Ultraschall Messmodul HC-SR04 ([Amazon](http://amzn.to/1HWMp3j))\r\n* Widerstände mit 1x330Ω und 1x470Ω (z.B. im großen durchmischten Set bei [Amazon](http://B009K6JLSM), ansonsten einzeln bei [Reichelt](http://www.reichelt.de/), [Conrad](http://www.conrad.de/) oder [ELV](http://www.elv.de/))\r\n\r\n¹ Alternativ zu den Male-Female Steckbrücken kann auch ein Breadboard-Adapter für die Verbindung zum RaspberryPi verwendet werden\r\n\r\n*Hinweis zu den Amazon-Links:* Alle Artikel-Links beinhalten Amazon Partner-Links. Mit der Bestellung über diese Links unterstützen Sie dieses Blog und erlauben uns weitere RaspberryPi Projekte hier zu veröffentlichen.\r\n\r\n### Funktionsweise:\r\n\r\nZiel des Aufbaus ist es, die Entfernung zu einem Gegenstand mittels Ultraschall-Impuls zu ermitteln. Verwendet wird hierfür das Ultraschall-Messmodul [HC-SR04](http://www.mikrocontroller.net/attachment/218122/HC-SR04_ultraschallmodul_beschreibung_3.pdf). Das Modul ist dabei in der Lage eine Entfernungsmessung im Bereich 2cm bis ~3 Meter durchzuführen mit einer Genauigkeit von ±3mm. \r\n\r\nDa Ultraschall durch Gegenstände reflektiert wird, kann mittels der Zeit zwischen absenden und empfangen des Schall die Entfernung berechnet werden. Bei einer Lufttemperatur von 20°C breitet sich Ultraschall 343,5 m/s aus, sodass mittels folgender Formel die Entfernung berechnet werden kann:\r\n\r\n> Distanz [cm] = (Signallaufzeit [Sek] / 2) * 34350 [cm/sek]\r\n\r\nBei der Formel stellt sich vielleicht die Frage, warum eigentlich die Signallaufzeit halbiert wird. Wenn wir uns das Script genau anschauen, wird die Laufzeit des Signals direkt beim absenden des Ultraschall-Pulses angefangen zu messen und hört auf, sobald das Echo-Signal wieder am Sensor ankommt. Dies hat zwangsweise die Folge, dass ich die Zeit für den Hin- und Rückweg habe. Für die Berechnung des Abstandes brauche ich allerdings nur die Zeit, die für einen der beide Wege benötigt wird - also die hälfte des Weges. Um dies zu erreichen wird die Laufzeit einfach halbiert.\r\n\r\n## Aufbau der Hardware:\r\n\r\n### HC-SR04 Ultraschall-Sensor:\r\n\r\n![Ultraschall Sensor](https://github.com/Blog404DE/RasPiUltraschallEntfernungsmesser/raw/master/Bilder/HC-SR04.jpg) \r\n\r\n#### Anschlüsse:\r\n1. Vcc (+5V)\r\n2. Trigger\r\n3. Echo\r\n4. Gnd\r\n\r\nAuf Vcc liegt die +5V Versorgungsspannung und bei Gnd die Masse an. Über \"Trigger\" wird der Ultraschall-Impuls ausgelöst und über Echo erfolgt die Signalisierung des erfolgreichen Empfang des Ultraschall-Echos. \r\n\r\n### Aufbau der Schaltung:\r\n\r\nDie 4 PINs des Ultraschall-Moduls müssen wie folgt mit dem RaspberryPi verbunden werden:\r\n\r\n- Vcc an Pin 2 (Vcc +5V)\r\n- GND an Pin 6 (GND) \r\n- TRIG an Pin 12 (GPIO 18)\r\n- An ECHO wird der 330Ω Widerstand angeschlossen. Vom Ende des Widerstands geht eine Verbindung zu Pin 18 (GPIO 24) und über den 470Ω eine Verbindung zu Pin 6 (GND).\r\n\r\n##### Bitte unbedingt beachten:\r\nDas HC-SR04 Modul darf auf keinen Fall direkt mit dem RaspberryPi verbunden werden. Das Ultraschall-Modul arbeitet mit einer Spannung von 5v, während die GPIO Ports des RaspberryPi nur 3.3V vertragen. Ohne einen Spannungsteiler am ECHO-Ausgang wird beim RaspberryPi daher der GPIO Eingang zerstört. Aus diesem Grund ist unbedingt der Widerstand R1 mit 330Ω notwendig. \r\n\r\n### Schaltbild auf dem Steckboard (Breadboard):\r\n\r\n![Breadboard](https://github.com/Blog404DE/RasPiUltraschallEntfernungsmesser/raw/master/Schaltplan/Schaltplan.png) \r\n\r\nDownloads-URLs für den Schaltplan in verschiedene Formate: \r\n\r\n- [PDF Datei](https://github.com/Blog404DE/RasPiUltraschallEntfernungsmesser/raw/master/Schaltplan/Schaltplan.pdf)\r\n- [Fritzing](https://github.com/Blog404DE/RasPiUltraschallEntfernungsmesser/raw/master/Schaltplan/Schaltplan.fzz)\r\n\r\n\r\n## Aufbau der Software\r\n\r\nFür den RaspberryPi wird empfiehlt sich Raspbian als System zu verwenden, welches über z.B. über [NOOB](https://www.raspberrypi.org/downloads/) installiert werden kann. Mittels eines Python-Scripts  kann die Messung durchgeführt werden.\r\n\r\n#### Python-Script \"getDistance.py\"\r\n\r\n```python\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\r\n# Entfernungsmesser für RaspberryPi\r\n# Version 1.0\r\n#\r\n# Copyright: tfnApps.de Jens Dutzi\r\n# Datum: 27.06.2015\r\n# Lizenz: MIT Lizenz (siehe LICENSE)\r\n# -----------------------------------\r\n\r\n\r\n# import required modules\r\nimport time\r\nimport RPi.GPIO as GPIO\r\n\r\n# define GPIO pins\r\nGPIOTrigger = 18\r\nGPIOEcho    = 24\r\n\r\n# Funktion zum messen der Entfernung\r\ndef MesseDistanz():\r\n\t# Trigger auf \"high\" setzen (Signal senden)\r\n\tGPIO.output(GPIOTrigger, True)\r\n\r\n\t# Signal für 10µs senden (ggf. je nach RaspberryPi auf 0.0005 setzen)\r\n\ttime.sleep(0.00001)\r\n\t\r\n\t# Trigger auf \"low setzen (Signal beenden)\r\n\tGPIO.output(GPIOTrigger, False)\r\n\r\n\t# Aktuelle Zeit setzen\r\n\tStartZeit = time.time()\r\n\tStopZeit = StartZeit\r\n\r\n\t# Warte bis \"Echo\" auf \"low\" gesetzt wird und setze danach Start-Zeit erneut\r\n\twhile GPIO.input(GPIOEcho) == 0:\r\n\t\tStartZeit = time.time()\r\n\r\n\t# Warte bis \"Echo\" auf \"high\" wechselt (Signal wird empfangen) und setze End-Zeit\r\n\twhile GPIO.input(GPIOEcho) == 1:\r\n\t\tStopZeit = time.time()\r\n\r\n\t# Abstand anhand der Signal-Laufzeit berechnen\r\n\t# Schallgeschwindigkeit: 343,50 m/s (bei 20°C Lufttemperatur)\r\n\t# Formel: /Signallaufzeit in Sekunden * Schallgeschwindigket in cm/s) / 2 (wg. Hin- und Rückweg des Signals)\r\n\tSignalLaufzeit = StopZeit - StartZeit\r\n\tDistanz = (SignalLaufzeit/2) * 34350\r\n\r\n\treturn [Distanz, (SignalLaufzeit*1000/2)]\r\n\r\n# main function\r\ndef main():\r\n\ttry:\r\n\t\twhile True:\r\n\t\t\tErgebnis = MesseDistanz()\r\n\t\t\tprint(\"Gemessene Entfernung: %.1f cm (Signallaufzeit: %.4fms)\" % (Ergebnis[0], Ergebnis[1]))\r\n\t\t\ttime.sleep(1)\r\n\r\n\t# reset GPIO settings if user pressed Ctrl+C\r\n\texcept KeyboardInterrupt:\r\n\t\tprint(\"Messung abgebrochen\")\r\n\t\tGPIO.cleanup()\r\n\r\nif __name__ == '__main__':\r\n\t# benutze GPIO Pin Nummerierung-Standard (Broadcom SOC channel)\r\n\tGPIO.setmode(GPIO.BCM)\r\n\r\n\t# Initialisiere GPIO Ports\r\n\tGPIO.setup(GPIOTrigger, GPIO.OUT)\r\n\tGPIO.setup(GPIOEcho, GPIO.IN)\r\n\r\n\t# Setze GPIO Trigger auf false\r\n\tGPIO.output(GPIOTrigger, False)\r\n\r\n\t# Main-Funktion starten\r\n\tmain()\r\n```\r\n\r\nDownload: [getDistance.py](https://raw.githubusercontent.com/Blog404DE/RasPiUltraschallEntfernungsmesser/master/Code/getDistance.py)\r\n\r\n### Wie führe ich eine Messung aus?\r\n\r\nNachdem Sie das Script auf Ihren RaspberryPi geladen haben, können Sie es direkt mittels folgendem Befehl aufrufen. Bitte beachten Sie, dass der Zugriff auf die GPIO Ports nur als *root* möglich ist:\r\n\r\n> root@raspberrypi:~# python getDistance.py\r\n\r\nAlternativ können Sie getDistance.py auch direkt ausführbar machen und sich das \"python\" beim aufrufen sparen. Hierzu ist nur folgendes notwendig:\r\n\r\n> root@raspberrypi:~# chmod +x getDistance.py\r\n\r\nDie Ausgabe des Python Scripts sieht wie folgt aus:\r\n\r\n```\r\nroot@raspberrypi:~# ./entfernung.py\r\nGemessene Entfernung: 22.5 cm (Signallaufzeit: 0.6559ms)\r\nGemessene Entfernung: 22.9 cm (Signallaufzeit: 0.6690ms)\r\nGemessene Entfernung: 22.9 cm (Signallaufzeit: 0.6690ms)\r\nGemessene Entfernung: 22.5 cm (Signallaufzeit: 0.6560ms)\r\nGemessene Entfernung: 22.9 cm (Signallaufzeit: 0.6670ms)\r\n```\r\n\r\nDas Programm ermittelt kontinuierlich den Abstand und kann mittels *STRG+C* beendet werden. \r\n\r\n\r\n\r\n___\r\n**Lizenz-Information:**\r\n\r\nCopyright Jens Dutzi 2015 / Stand: 12.07.2015\r\n\r\nDieses Werk ist lizenziert unter der [MIT Lizenz](https://github.com/Blog404DE/RasPiUltraschallEntfernungsmesser/blob/master/LICENSE).","google":"UA-571228-17","note":"Don't delete this file! It's used internally to help with page regeneration."}